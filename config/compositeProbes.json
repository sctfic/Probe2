{
    "THSW_calc": {
        "label": "Température THSW",
        "comment": "Température de Sensibilisation, Thermique, Humidité, Soleil et Vent",
        "fnCalc": "(data) => calcTHSW(data['temperature:outTemp'], data['humidity:outHumidity'], data['powerRadiation:solarRadiation'], data['speed:Wind'])",
        "dataNeeded": [
            "temperature:outTemp",
            "humidity:outHumidity",
            "powerRadiation:solarRadiation",
            "speed:Wind"
        ],
        "currentMap": {
            "d": "timestamp",
            "temperature:outTemp": "outTemp",
            "humidity:outHumidity": "outHumidity",
            "powerRadiation:solarRadiation": "solarRadiation",
            "speed:Wind": "Wind"
        },
        "scriptJS": [
            "/js/composite/THSW.js"
        ],
        "period": 604800,
        "groupUsage": "Composites",
        "sensorDb": "THSW_calc",
        "measurement": "temperature"
    },
    "AirWater_calc": {
        "label": "masse d'H2O dans l'air",
        "comment": "masse d'eau par mettre cube d'air (ou g/l)",
        "fnCalc": "(data) => waterInAir( data['temperature:outTemp'], data['humidity:outHumidity'], data['pressure:barometer']\n).g_per_m3",
        "dataNeeded": [
            "temperature:outTemp",
            "humidity:outHumidity",
            "pressure:barometer"
        ],
        "currentMap": {
            "d": "timestamp",
            "temperature:outTemp": "outTemp",
            "humidity:outHumidity": "outHumidity",
            "pressure:barometer": "barometer"
        },
        "scriptJS": [
            "/js/composite/AirWater.js"
        ],
        "period": 604800,
        "groupUsage": "Composites",
        "sensorDb": "AirWater_calc",
        "measurement": "density"
    },
    "SUN_V_calc": {
        "label": "Angle vertical du soleil",
        "comment": "calcul de la phase du soleil",
        "fnCalc": "(data, lon=%longitude%, lat=%latitude% , alt=%altitude%) => {\n    const V = SunCalc.getPosition(new Date(data.d), lat, lon).altitudeDegrees;\n        return V > 0 ? Math.round(V*10)/10 : 0;\n}",
        "dataNeeded": [
            "pressure:barometer"
        ],
        "currentMap": {
            "d": "timestamp",
            "pressure:barometer": "barometer"
        },
        "scriptJS": [
            "/js/composite/sunCalc.js"
        ],
        "period": 2592000,
        "groupUsage": "Composites",
        "sensorDb": "SUN_V_calc",
        "measurement": "angle"
    },
    "MOON_calc": {
        "label": "Phase de la lune",
        "comment": "calcul de la phase de la lune",
        "fnCalc": "(data, lon=%longitude%, lat=%latitude% , alt=%altitude%) => {\n    const P = SunCalc.getMoonPosition(\n    new Date(data.d), lat, lon).altitudeDegrees;\n    return Math.round(P*10)/10;\n}",
        "dataNeeded": [
            "pressure:barometer"
        ],
        "currentMap": {
            "d": "timestamp",
            "pressure:barometer": "barometer"
        },
        "scriptJS": [
            "/js/composite/sunCalc.js"
        ],
        "period": 2592000,
        "groupUsage": "Composites",
        "sensorDb": "MOON_calc",
        "measurement": "angle"
    },
    "truc_calc": {
        "label": "test",
        "comment": "machin",
        "fnCalc": "(data, lon=%longitude%, lat=%latitude% , alt=%altitude%) => {\n    return data['direction:Gust']+data['direction:Gust']+data['humidity:outHumidity']\n}",
        "dataNeeded": [
            "direction:Gust",
            "humidity:outHumidity"
        ],
        "currentMap": {
            "d": "timestamp",
            "direction:Gust": "Gust",
            "humidity:outHumidity": "outHumidity"
        },
        "scriptJS": [],
        "period": 604800,
        "groupUsage": "Composites",
        "sensorDb": "truc_calc",
        "measurement": "pressure"
    }
}